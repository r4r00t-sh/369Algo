[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "369algo"
version = "1.0.0"
description = "Professional Trading Web Application with Real-time Market Data and Financial News"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "369 Algo Team", email = "team@369algo.com"}
]
maintainers = [
    {name = "369 Algo Team", email = "team@369algo.com"}
]
keywords = ["trading", "finance", "stock-market", "algorithmic-trading", "fastapi", "react"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
]
requires-python = ">=3.8"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "httpx>=0.25.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "requests>=2.31.0",
    "aiofiles>=23.2.0",
    "python-dateutil>=2.8.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "bandit>=1.7.5",
    "pre-commit>=3.5.0",
    "coverage>=7.3.0",
    "tox>=4.11.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "coverage>=7.3.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-autorefs>=0.4.0",
]

[project.urls]
Homepage = "https://github.com/r4r00t-sh/369Algo"
Documentation = "https://369algo.com/docs"
Repository = "https://github.com/r4r00t-sh/369Algo.git"
"Bug Tracker" = "https://github.com/r4r00t-sh/369Algo/issues"
"Source Code" = "https://github.com/r4r00t-sh/369Algo"
"Release Notes" = "https://github.com/r4r00t-sh/369Algo/releases"
"Security Policy" = "https://github.com/r4r00t-sh/369Algo/security/policy"
"Contributing Guide" = "https://github.com/r4r00t-sh/369Algo/blob/main/CONTRIBUTING.md"
"Code of Conduct" = "https://github.com/r4r00t-sh/369Algo/blob/main/CODE_OF_CONDUCT.md"

[project.scripts]
369algo = "369algo.cli:main"

[tool.setuptools.packages.find]
where = ["backend"]
include = ["*"]
exclude = ["tests*", "test_*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["369algo"]
known_third_party = ["fastapi", "uvicorn", "sqlalchemy", "redis"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".eggs",
    "*.egg",
    ".mypy_cache",
    ".pytest_cache",
]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "fastapi.*",
    "uvicorn.*",
    "sqlalchemy.*",
    "redis.*",
    "jose.*",
    "passlib.*",
    "httpx.*",
    "pydantic.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests", "backend/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

# Pre-commit configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.5.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
            {id = "debug-statements"},
        ],
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.11.0",
        hooks = [{id = "black"}],
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [{id = "isort"}],
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.1.0",
        hooks = [{id = "flake8"}],
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.7.0",
        hooks = [
            {id = "mypy", additional_dependencies = ["types-all"]},
        ],
    },
]

# Tox configuration
[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38, py39, py310, py311, py312
isolated_build = True

[testenv]
deps =
    pytest
    pytest-cov
    pytest-asyncio
    httpx
commands =
    pytest {posargs:tests} --cov=369algo --cov-report=term-missing
"""
